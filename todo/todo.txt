-------------------------
--ToDo
-------------------------

NAZEV = snmpxmld (deamon)

1. Struktura demona
	- zkusit spustit demona
	DONE

	- init script (/etc/init.d) a komunikace pomoci start-stop-daemon
	DONE

	-logging - time format
	DONE

	- input parameter - config file
	DONE

	- config file v /etc/snmpxml/nazev
	DONE

2. Nacrtnout tridy programu
DONE

3. konfiguracni cast
	- navrhnout strukturu konfiguraku
	MOSTLY DONE - TODO REVISION

	- parsovat konfigurak
	VIZ PREDCHOZI

	- predavat informace SNMP tride o jednotlivych zarizenich
	DONE
		- check jestli uz takove zarizeni neni pridane
		DONE
		- nutno vymyslet strukturu, ktera bude predavatelna mezi nimi
		DONE

		- dodelat elementy address, port do elementu manager (v ramci traps)
		DONE

		- dodelat element protocolVersion -  do hlavniho elementu Gate (pro Discovery message)

4. check na dostupnost jednotlivych zarizeni
	- vytvorit celou SNMP tridu 
	DONE
		- inicializace snmp
		DONE

	- osetrit povinne elementy vytazene z konfiguraku
	DONE
	
	- nejprve nahrat vsechna zarizeni a kontrola, jestli uz takove id tam neni
	DONE

	- pak zkontrolovat jejich funkcnost (odpoved snmp zpravou) a existenci jejich mib
	DONE
		- komunikace s jednotlivymi zarizenimi
		DONE
		
		- dodelat switch na protocol version (pouze 1,2 -> z toho netsnmp)
		DONE

		- osetrit spravne chovani pri spatne inicializaci sessny
		DONE

		- existence mib
		DONE

	- paklize uz neni zadne zarizeni na monitorovani, vypsat hlasku a skoncit
	DONE

	- paklize ma nejake zarizeni stejne MIB jako nejake jine, dat mu novy parametr "similarAsId" (kvuli sdileni stromu)
	DONE

5. transformace
	- prochazet komplet mib do detailu
	DONE

	- nastudovat si XML XSD strukturu Macejkova navrhu
	DONE
		- jak volit namespace v ramci jednoho souboru (neni to rozdeleno do nekolika modulu, tudiz vsechno je v ramci 
		jednoho souboru).

		- vse generujeme do jedineho souboru ( 1 device = 1 soubor )
		PROC: manazer na druhe strane nemuze vedet, jak to pospojovat dohromady - ze existuje nejake
		oid, ktere je tim spojovacim clankem. Proto je nutne mu predat ten cely strom v celku.
		Sice spojeni nekolika by usetrilo misto, pac by se kazde mib generovalo zvlast, ale
		pak pri posilani by zabralo dlouhou dobu to vsechno pospojovat a poslat mu to najednou.
		A zaroven se tyto mib generuji pouze jednou (pri zadne zmene), tudiz overhead je minimalni.
		Zaroven mame sdileni stromu, takze vice zarizeni stejneho typu ma jeden soubor a sdileji jej.
	
	- udelat transformaci
	DONE
		- Normalni objekty - Simple, sequence, sequence of
		DONE
		- Trap types
		DONE

	- udelat dokument se zakladni kostrou stromu pro gate
		- zakladni dokuemnt
		DONE

		- dodat informace z notifications!!

	- udelat vlastni transformacni tridu a zaclenit ji do demona
	DONE

	- Dodelat sortovani zarizeni v ramci devices_list dle id, aby tomu pak odpovidalo poradi xml dokumentu

	- Dodelat promenne pro zakladni nazvy souboru "snmpxmld.xsd", aby to slo menit globalne



6. Nastartovani threadu pro poslouchani a vykonavani prikazu
	- pripravit si thready a funkce
		- snmp comm thread

		- http server
		DONE

		- distribution thr.

		- xml trap to manager

7. Zakladni komunikace
	- rozchodit http server thread
	DONE

	- spustit poslouchani
	DONE

	- callback na vyrizovani pozadavku
		- parsovani dat
		DONE

		- generovani odpovedi
		DONE
	
	- kazdy http thread bude volat snmp fci -> send meesgae
		Tato fce bude cekat thread-safe synch response na odpoved a rovnou
		se pak vygeneruje odpoved.

		Mezi tridami se nebudou predavat xml-specific/snmp-specific informace.
		Pouze to nejnutnejsi. Snmp vyparsuje data a preda je pak xml, ktera z toho
		udela odpoved a konec. Striktne oddelena funkcnost!!!!
	
	- jednotlive zpravy
		- discovery
		DONE

		- publication
		DONE

		- get
			- simple values

			-tabulky

			- Nutne dodelani objectId parametru do teto zpravy!
			DONE

		- set
			- tabulky

		- response

8. Pokrocila komunikace - notifications
	- thread na posilani XML zprav managerovi

	- signaly na probouzeni tohoto vlakna

	- snmp thread, ktery ceka na ty trapy


9. Pokrocila komunikace - subscriptions / distribution
	- thread na vyrizovani techto pozadavku

10. Zabezpeceni
	- pridat fci na spousteni demona s certifikatama



------------------------
--Problemy k vyreseni
------------------------

Low priority
------------
- DONE Ukoncit beh pri parsovani konfiguraku, paklize jsme nalezli duplikatni zarizeni ci jakykoliv problem pri pridavani zarizeni

- INVALID Nedelat transformaci pokazde. Ulozit si checksum logovaciho souboru a pak se podivat, jestli se neco zmenilo (low priority)

- DONE Pro managera pouzit knihovnu libcurl pro smotavani http dotazu



- Do textu pak napsat, ze vyuzivame pouze protokol 1 a 2c, jine nepodoporuje knihovna net-snmp

- Do textu dopsat, ze neni nutno nahravat vsechny mib, pac je tam jisty standard. ostatni se musi pridat

- Do textu pripsat, jake problemy nam net-snmp dela (description, ruzne typy a range, ze to neni jednoznacne)

- Do textu zmenit analyzu -> Description message - optional atribut objectId

- Udelat snmpxmlgate jako global promennou -> pri odchytnuti sigterm se zavola stop a ukonci se jeho funkce hezky a nikoliv
nasilnym smazanim vsech struktur.

- Udelat seznam Publication error codes - (vubec vymyslet nejaky seznam)



Medium priority
---------------

- DONE Struktura elementu <trap></trap> v ramci konfiguraku



High Priority
---------------
- DONE  Dodelat elementy do konfiguraku dle toho, jak je pak navrzena struktura device v diplomce (appInfo tagy apod) 

- DONE  getNodeValue() nevraci hodnotu daneho uzlu -> pradny info o device!!!!

- DONE Paklize nebude v konfiguraku zadna MIB uvedena dodatecne, bere se v potaz, ze je to DEFAULT a tim padem se vezme zakladni nastaveni net-snmp s jeho default moduly.

- DONE  Dodelat do konfiguraku manager -> address, port elementy. Nutne specifikovat, kde to manazer prijima.
Tudiz dodat nove info do struktury SNMP_device a tak s tim podle toho pracovat!! Stanovit nejakej standardni
port, kde to bude prijimat a pak to dle toho parsovat.!!!!!

- DONE Transformator - vymyslet, jestli integrovat hlavicku, nebo ji prilozit ve vedlejsim souboru (definice typu) -> Prikladame ve vedlejsim souboru

- DONE Hlavni trida Gate by mela mit primarne seznam vsech devices (aby mohla poskytovat info dalsim tridam)
To navratime gettrem z snmpmod

- DONE  xml dokumenty se nedokazou prekryvat. Tudiz udelame seznam device dokumentu a hlavni dokument bude zvlast.
paklize se pak nekdo zepta na nejaka data, tak se mrkneme do prislusneho dokumentu, ale nemuze to byt pod data (je to ULEHCENI)

- DONE DULEZITE NECHODI SEND RESPONSE BACK





- Domyslet cesty pro mib, log soubory, xsd soubory, aby to v tom unix file tree nejak hezky sedelo a nebyla to prasarna.

- Device id = 0, paklize je duplikat, spadne to na segfaultu, pac to chce pristoupit nekam, co tam neni

- HTTP server -> nutno doplnit do konfiguraku neco ohledne bezpecnostiho certifikatu pro https

- Do parseru XML configu -> paklize nejsou nastaveny porty pro poslouchani a transmit, dosadime nejake defaultni (GATE device)

- Zamyslet se nad tim, proc mam vlastne xsd soubory, kdyz to stejne nacitam z pameti

- Udelat lepsi parsovani XML dat z message, ktery prijmeme

- RESPONSE message se musi rozsirit i o ERROR element, kdy neco nevyjde

- Problem s XPath. Jestli v te hnusne podobe ma posilat string manager, nebo se ma vytvorit az na miste






MACEJKOVI - konzultace:
--------------------------
- Kdyz bude pri GET dotaz na uzel, ktery ma deti, tak se to ma rekurzivne projet dolu a najit vsechny hodnoty??
- GET a SET message mohou mit vice jednotlivych <xpath></xpath> dotazu v ramci jedne message,ze?
- XPath vyraz je problem - musime odkazovat na atribut name. Tudiz mel by se o to starat ten manager?? Jsem rozhodne pro
(vysledny xpath vyraz je fakt hnusny, pac se stale opakuje xsd:element[name="xxx"])


